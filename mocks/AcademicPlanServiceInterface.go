// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	request "github.com/iki-rumondor/go-monev/internal/http/request"
	models "github.com/iki-rumondor/go-monev/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// AcademicPlanServiceInterface is an autogenerated mock type for the AcademicPlanServiceInterface type
type AcademicPlanServiceInterface struct {
	mock.Mock
}

// CreateAcademicPlan provides a mock function with given fields: userUuid, req
func (_m *AcademicPlanServiceInterface) CreateAcademicPlan(userUuid string, req *request.AcademicPlan) error {
	ret := _m.Called(userUuid, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateAcademicPlan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *request.AcademicPlan) error); ok {
		r0 = rf(userUuid, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAcademicPlan provides a mock function with given fields: userUuid, uuid
func (_m *AcademicPlanServiceInterface) DeleteAcademicPlan(userUuid string, uuid string) error {
	ret := _m.Called(userUuid, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAcademicPlan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userUuid, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAcademicPlan provides a mock function with given fields: userUuid, uuid
func (_m *AcademicPlanServiceInterface) GetAcademicPlan(userUuid string, uuid string) (*models.AcademicPlan, error) {
	ret := _m.Called(userUuid, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetAcademicPlan")
	}

	var r0 *models.AcademicPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.AcademicPlan, error)); ok {
		return rf(userUuid, uuid)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.AcademicPlan); ok {
		r0 = rf(userUuid, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AcademicPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userUuid, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAcademicYear provides a mock function with given fields: yearUuid
func (_m *AcademicPlanServiceInterface) GetAcademicYear(yearUuid string) (*models.AcademicYear, error) {
	ret := _m.Called(yearUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetAcademicYear")
	}

	var r0 *models.AcademicYear
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.AcademicYear, error)); ok {
		return rf(yearUuid)
	}
	if rf, ok := ret.Get(0).(func(string) *models.AcademicYear); ok {
		r0 = rf(yearUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AcademicYear)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(yearUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAcademicPlans provides a mock function with given fields: userUuid, yearUuid
func (_m *AcademicPlanServiceInterface) GetAllAcademicPlans(userUuid string, yearUuid string) (*[]models.AcademicPlan, error) {
	ret := _m.Called(userUuid, yearUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAcademicPlans")
	}

	var r0 *[]models.AcademicPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*[]models.AcademicPlan, error)); ok {
		return rf(userUuid, yearUuid)
	}
	if rf, ok := ret.Get(0).(func(string, string) *[]models.AcademicPlan); ok {
		r0 = rf(userUuid, yearUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.AcademicPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userUuid, yearUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDepartment provides a mock function with given fields: departmentUuid, yearUuid
func (_m *AcademicPlanServiceInterface) GetDepartment(departmentUuid string, yearUuid string) (*[]models.AcademicPlan, error) {
	ret := _m.Called(departmentUuid, yearUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetDepartment")
	}

	var r0 *[]models.AcademicPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*[]models.AcademicPlan, error)); ok {
		return rf(departmentUuid, yearUuid)
	}
	if rf, ok := ret.Get(0).(func(string, string) *[]models.AcademicPlan); ok {
		r0 = rf(departmentUuid, yearUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.AcademicPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(departmentUuid, yearUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMiddle provides a mock function with given fields: userUuid, yearUuid
func (_m *AcademicPlanServiceInterface) GetMiddle(userUuid string, yearUuid string) (*[]models.AcademicPlan, error) {
	ret := _m.Called(userUuid, yearUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetMiddle")
	}

	var r0 *[]models.AcademicPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*[]models.AcademicPlan, error)); ok {
		return rf(userUuid, yearUuid)
	}
	if rf, ok := ret.Get(0).(func(string, string) *[]models.AcademicPlan); ok {
		r0 = rf(userUuid, yearUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.AcademicPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userUuid, yearUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: userUuid
func (_m *AcademicPlanServiceInterface) GetUser(userUuid string) (*models.User, error) {
	ret := _m.Called(userUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(userUuid)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(userUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAcademicPlan provides a mock function with given fields: userUuid, uuid, req
func (_m *AcademicPlanServiceInterface) UpdateAcademicPlan(userUuid string, uuid string, req *request.UpdateAcademicPlan) error {
	ret := _m.Called(userUuid, uuid, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAcademicPlan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *request.UpdateAcademicPlan) error); ok {
		r0 = rf(userUuid, uuid, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOne provides a mock function with given fields: userUuid, uuid, column, value
func (_m *AcademicPlanServiceInterface) UpdateOne(userUuid string, uuid string, column string, value interface{}) error {
	ret := _m.Called(userUuid, uuid, column, value)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, interface{}) error); ok {
		r0 = rf(userUuid, uuid, column, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAcademicPlanServiceInterface creates a new instance of AcademicPlanServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAcademicPlanServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AcademicPlanServiceInterface {
	mock := &AcademicPlanServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
