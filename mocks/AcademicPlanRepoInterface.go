// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	models "github.com/iki-rumondor/go-monev/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// AcademicPlanRepoInterface is an autogenerated mock type for the AcademicPlanRepoInterface type
type AcademicPlanRepoInterface struct {
	mock.Mock
}

// CreateAcademicPlan provides a mock function with given fields: _a0
func (_m *AcademicPlanRepoInterface) CreateAcademicPlan(_a0 *models.AcademicPlan) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateAcademicPlan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.AcademicPlan) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAcademicPlan provides a mock function with given fields: _a0
func (_m *AcademicPlanRepoInterface) DeleteAcademicPlan(_a0 *models.AcademicPlan) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAcademicPlan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.AcademicPlan) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAcademicPlans provides a mock function with given fields: userUuid, yearID
func (_m *AcademicPlanRepoInterface) FindAcademicPlans(userUuid string, yearID uint) (*[]models.AcademicPlan, error) {
	ret := _m.Called(userUuid, yearID)

	if len(ret) == 0 {
		panic("no return value specified for FindAcademicPlans")
	}

	var r0 *[]models.AcademicPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint) (*[]models.AcademicPlan, error)); ok {
		return rf(userUuid, yearID)
	}
	if rf, ok := ret.Get(0).(func(string, uint) *[]models.AcademicPlan); ok {
		r0 = rf(userUuid, yearID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.AcademicPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint) error); ok {
		r1 = rf(userUuid, yearID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAcademicYearBy provides a mock function with given fields: column, value
func (_m *AcademicPlanRepoInterface) FindAcademicYearBy(column string, value interface{}) (*models.AcademicYear, error) {
	ret := _m.Called(column, value)

	if len(ret) == 0 {
		panic("no return value specified for FindAcademicYearBy")
	}

	var r0 *models.AcademicYear
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (*models.AcademicYear, error)); ok {
		return rf(column, value)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) *models.AcademicYear); ok {
		r0 = rf(column, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AcademicYear)
		}
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(column, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBy provides a mock function with given fields: departmentID, yearID, column, value
func (_m *AcademicPlanRepoInterface) FindBy(departmentID uint, yearID uint, column string, value interface{}) (*[]models.AcademicPlan, error) {
	ret := _m.Called(departmentID, yearID, column, value)

	if len(ret) == 0 {
		panic("no return value specified for FindBy")
	}

	var r0 *[]models.AcademicPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, string, interface{}) (*[]models.AcademicPlan, error)); ok {
		return rf(departmentID, yearID, column, value)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, string, interface{}) *[]models.AcademicPlan); ok {
		r0 = rf(departmentID, yearID, column, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.AcademicPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, string, interface{}) error); ok {
		r1 = rf(departmentID, yearID, column, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindDepartmentBy provides a mock function with given fields: column, value
func (_m *AcademicPlanRepoInterface) FindDepartmentBy(column string, value interface{}) (*models.Department, error) {
	ret := _m.Called(column, value)

	if len(ret) == 0 {
		panic("no return value specified for FindDepartmentBy")
	}

	var r0 *models.Department
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (*models.Department, error)); ok {
		return rf(column, value)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) *models.Department); ok {
		r0 = rf(column, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Department)
		}
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(column, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSubjectBy provides a mock function with given fields: column, value
func (_m *AcademicPlanRepoInterface) FindSubjectBy(column string, value interface{}) (*models.Subject, error) {
	ret := _m.Called(column, value)

	if len(ret) == 0 {
		panic("no return value specified for FindSubjectBy")
	}

	var r0 *models.Subject
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (*models.Subject, error)); ok {
		return rf(column, value)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) *models.Subject); ok {
		r0 = rf(column, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Subject)
		}
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(column, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUser provides a mock function with given fields: userUuid
func (_m *AcademicPlanRepoInterface) FindUser(userUuid string) (*models.User, error) {
	ret := _m.Called(userUuid)

	if len(ret) == 0 {
		panic("no return value specified for FindUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(userUuid)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(userUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserAcademicPlan provides a mock function with given fields: userUuid, uuid
func (_m *AcademicPlanRepoInterface) FindUserAcademicPlan(userUuid string, uuid string) (*models.AcademicPlan, error) {
	ret := _m.Called(userUuid, uuid)

	if len(ret) == 0 {
		panic("no return value specified for FindUserAcademicPlan")
	}

	var r0 *models.AcademicPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.AcademicPlan, error)); ok {
		return rf(userUuid, uuid)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.AcademicPlan); ok {
		r0 = rf(userUuid, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AcademicPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userUuid, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAcademicPlan provides a mock function with given fields: _a0
func (_m *AcademicPlanRepoInterface) UpdateAcademicPlan(_a0 *models.AcademicPlan) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAcademicPlan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.AcademicPlan) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOne provides a mock function with given fields: id, column, value
func (_m *AcademicPlanRepoInterface) UpdateOne(id uint, column string, value interface{}) error {
	ret := _m.Called(id, column, value)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string, interface{}) error); ok {
		r0 = rf(id, column, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAcademicPlanRepoInterface creates a new instance of AcademicPlanRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAcademicPlanRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AcademicPlanRepoInterface {
	mock := &AcademicPlanRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
